Splunk on GCP with Ansible

// 1. Create a free Gmail account 
// 2. Use Google Cloud for free and make note of the Project Name and Project ID 
// 3. Create a service account with Roles 'Storage Admin', 'Compute Admin' and 'Compute Storage Admin'. Note the service account's name. 
// 4. Create a GCP firewall rule for all instances in the network named "splunk-open-ports" with all default values except allow TCP ports 8000, 8089, 9887, and 9997 for the Splunk deployment. 
// 5. Create private key and download JSON file to '~/autoSplunkDeployment/files/mygcpaccount.json'
// 6. Create the Ansible console server with GCP Compute Engine (e2-small - "ansible-console-01" - Ubuntu 20.04LTS @ 10GB disk)

// 7. SSH to "ansible-console-01" and install the following packages with: 
  sudo apt -y update; sudo apt -y install openssh-server; sudo apt -y install git; sudo apt -y install python3-pip; sudo pip3 install ansible; sudo ansible-galaxy collection install google.cloud; pip3 install google-auth

// 8. Clone remote GitHub 'ansible' repository to your Ansible console server with the following command: 
  cd ~; git clone git@github.com:teaganpacheco/autoSplunkDeployment.git 

// 9. Download an improved bashrc for management console with: 
  wget -O ~/.bashrc https://sourceforge.net/projects/ultimate-bashrc/files/_bashrc/download; usermod --shell /bin/bash $(whoami); /bin/bash

// 10. Create Ansible's SSH keys for remote connections to each client system with the following command. Name the file 'ansible'. Do not enter a passphrase: 
  cd ~/.ssh/; ssh-keygen -t ed25519 -C "ansible" 

// 11. Create Splunk user SSH keys with the following command and name the file 'splunk'. Enter a passphrase of your choosing: 
  cd ~/.ssh/; ssh-keygen -t ed25519 -C "splunk"  

// 12. Create Splunk administrative user account for connections to each client system with the following command. Enter "sysadmin01" as the password for the Splunk user account: 
  sudo useradd -m splunk; sudo usermod -aG sudo splunk; cd /home/splunk; sudo mkdir .ssh/; sudo chown -R splunk. /home/splunk/.ssh; cd ~/.ssh; cat *.pub > authorized_keys; sudo cp /home/$(whoami)/.ssh/authorized_keys /home/splunk/.ssh/; cd /home/splunk/.ssh/; sudo chown splunk. authorized_keys; sudo chmod 664 authorized_keys; sudo passwd splunk

// 13. Within the 'autoSplunkDeployment' directory, find and replace all mentions of previous usernames and project IDs in the following locations: 
// 	- autoSplunkDeployment/gcp/dev/.*yml. Use: 
  cd ~/autoSplunkDeployment/gcp/dev; sed -i 's/gcp_project:\s.*/gcp_project: "<projectName>"/' *.yml

// 	- autoSplunkDeployment/inventory/mygcp.gcp.yml. Use: 
  cd ~/autoSplunkDeployment/inventory; sed -i '/projects:/!b;n;s/.*/  - <projectName>/' mygcp.gcp.yml

// 14. Replace the existing 'ansible' public SSH keys within the "autoSplunkDeployment/gcp/dev/.*yml" files in the "startup-script" field values. Use: 
  cd ~/autoSplunkDeployment/gcp/dev; sed -i 's|ssh-ed25519 [^ ]* ansible|ssh-ed25519 <newAnsibleSshKey> ansible|' *.yml

// 15. Launch the Splunk management combo box (splk-mgmt.yml) with: 
  cd ~/autoSplunkDeployment; ansible-playbook -K gcp/dev/splk-mgmt.yml 

// 	** Due to the limitations surrounding free trials with cloud providers, we will be consolidating our Deployment Server, Deployer, Cluster Manager, License Manager, and Monitoring Console onto one machine. This is against Splunk best practice. It will, however, suffice for the purposes of an educational experience that this exercise is meant to represent.**

// 16. Add the Splunk management combo box's internal IP address to the "autoSplunkDeployment/inventory/hosts" file under the '[management_combo]' group. Use to get the internal IP: 
  cd ~/autoSplunkDeployment; ansible-inventory -i inventory/mygcp.gcp.yml --graph 

// 17. Configure the newly launched management box (splk-mgmt-00) with the 'base-mgmt.yml' playbook using: 
  cd ~/autoSplunkDeployment; ansible-playbook -K splunk/dev/base-mgmt.yml 

// 18. Prep the Splunk management combo box (splk-mgmt.yml) with the following command. This will prepare the Search Head and Indexer Cluster apps and subsequent deployments: 
  cd ~/autoSplunkDeployment; scripts/mgmt_scripts/clusteringSetup.sh

// 19. Send the Splunk management combo box the necessary script to further prepare its various Splunk apps with: 
  scp -i ~/.ssh/ansible ~/autoSplunkDeployment/scripts/mgmt_scripts/mgmtSplkAppUpdate.sh splunk@<management_combo_ip>:/opt/splunk/etc/

// 20. Still from the Ansible console server, run the following command to prepare such functions as licensing, outputs, and search head clustering: 
  cd ~/autoSplunkDeployment; ansible management_combo -m shell -a "/opt/splunk/etc/mgmtSplkAppUpdate.sh; /opt/splunk/bin/splunk restart" 

// 21. Launch the Indexer Cluster with: 
  cd ~/autoSplunkDeployment; ansible-playbook -K gcp/dev/splk-idxcluster.yml 

// 22. Add the Indexer's internal IP address to the "autoSplunkDeployment/inventory/hosts" file under the '[idx_cluster_members]' group. Use the same command as before to get the internal IP: 
  cd ~/autoSplunkDeployment; ansible-inventory -i inventory/mygcp.gcp.yml --graph 

// 23. Configure the Indexer Cluster with: 
  cd ~/autoSplunkDeployment; ansible-playbook -K splunk/dev/base-idx-cluster.yml 

// 24. Deploy an Indexer Cluster rolling restart with: 
  cd ~/autoSplunkDeployment; ansible management_combo -m shell -a "/opt/splunk/bin/splunk apply cluster-bundle --answer-yes -auth admin:sysadmin01"

// 25. Launch the Search Head Cluster instances with: 
  cd ~/autoSplunkDeployment; ansible-playbook -K gcp/dev/splk-shcluster.yml 

// 26. Add the Search Heads' internal IP address to the "autoSplunkDeployment/inventory/hosts" file under the '[sh_cluster_members]' group to get the internal IP with: 
  cd ~/autoSplunkDeployment; ansible-inventory -i inventory/mygcp.gcp.yml --graph 

// 27. Prep the Search Head Cluster members with the following command to prepare their initialization and bootstrap captain placement: 
  cd ~/autoSplunkDeployment; scripts/mgmt_scripts/shCaptianList.sh 

// 28. Configure the Search Head Cluster members with: 
  cd ~/autoSplunkDeployment; ansible-playbook -K splunk/dev/base-sh-cluster.yml 

// 29. Send the Splunk Search Head Clustering Initialization the necessary script to further prepare its Clustering with: 
  cd ~/autoSplunkDeployment; ansible sh_cluster_members -m copy -a "src=~/autoSplunkDeployment/scripts/mgmt_scripts/shClusterInit.sh dest=/opt/splunk/etc/shClusterInit.sh mode=0755"

// 30. Still from the Ansible console server, run the following command to prepare such Search Head Clustering functions: 
  cd ~/autoSplunkDeployment; ansible sh_cluster_members -m shell -a "/opt/splunk/etc/shClusterInit.sh"

// 31. Wait about three minutes for the Search Head Cluster to be established. 

// 32. Setup the Search Head Cluster captain with: 
  cd ~/autoSplunkDeployment; ansible-playbook -K splunk/dev/sh-cluster-captain.yml 

// 33. Wait another three minutes for the Search Head Cluster to stabalize. 

// 34. Deploy Search Head Cluster related apps in the Deployer with: 
  cd ~/autoSplunkDeployment; ansible management_combo -m shell -a "/opt/splunk/bin/splunk apply shcluster-bundle --answer-yes -target https://<management_combo_hostname>:8089 -auth admin:sysadmin01"

// 35. Launch the the Linux-based Universal Forwarder VM instances with: 
  cd ~/autoSplunkDeployment; ansible-playbook -K gcp/dev/splk-ufwdr.yml 

// 36. Add the Universal Forwarders' internal IP address to the "autoSplunkDeployment/inventory/hosts" file under the '[uforwarders]' group. Use: 
  cd ~/autoSplunkDeployment; ansible-inventory -i inventory/mygcp.gcp.yml --graph 

// 37. Prep the Universal Forwarders' "z_deploymentclient" app with: 
  cd ~/autoSplunkDeployment; scripts/mgmt_scripts/deploymentClientUpdate.sh

// 38. Configure the Universal Forwarders with: 
  cd ~/autoSplunkDeployment; ansible-playbook -K splunk/dev/base-ufwdr.yml 
